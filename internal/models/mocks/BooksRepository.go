// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/leokuzmanovic/go-echo-example/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// BooksRepository is an autogenerated mock type for the BooksRepository type
type BooksRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, title, author
func (_m *BooksRepository) Create(ctx context.Context, title string, author string) (*models.Book, error) {
	ret := _m.Called(ctx, title, author)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Book, error)); ok {
		return rf(ctx, title, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Book); ok {
		r0 = rf(ctx, title, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, title, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *BooksRepository) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *BooksRepository) GetById(ctx context.Context, id string) (*models.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: ctx, title
func (_m *BooksRepository) GetByTitle(ctx context.Context, title string) (*models.Book, error) {
	ret := _m.Called(ctx, title)

	if len(ret) == 0 {
		panic("no return value specified for GetByTitle")
	}

	var r0 *models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Book, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Book); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBooksRepository creates a new instance of BooksRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBooksRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BooksRepository {
	mock := &BooksRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
