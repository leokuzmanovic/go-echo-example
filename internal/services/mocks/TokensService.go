// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	null "gopkg.in/guregu/null.v4"

	uuid "github.com/gofrs/uuid"
)

// TokensService is an autogenerated mock type for the TokensService type
type TokensService struct {
	mock.Mock
}

// CheckToken provides a mock function with given fields: ctx, tokenString
func (_m *TokensService) CheckToken(ctx context.Context, tokenString string) (uuid.UUID, bool, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for CheckToken")
	}

	var r0 uuid.UUID
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, bool, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, tokenString)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateNewTokens provides a mock function with given fields: ctx, userId
func (_m *TokensService) CreateNewTokens(ctx context.Context, userId uuid.UUID) (null.String, null.String, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewTokens")
	}

	var r0 null.String
	var r1 null.String
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (null.String, null.String, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) null.String); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(null.String)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) null.String); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Get(1).(null.String)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID) error); ok {
		r2 = rf(ctx, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewTokensService creates a new instance of TokensService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokensService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokensService {
	mock := &TokensService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
